# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..
      
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
        
      - name: Prepare deployment package
        run: |
          # Create a clean directory for deployment
          mkdir -p app_deploy
          
          # Copy application files
          cp -r *.py *.sh *.json *.txt web.config requirements.txt .deployment app_deploy/
          cp -r app app_deploy/
          
          # Ensure .azure directory exists and contains startup script
          mkdir -p app_deploy/.azure
          cp .azure/startup.sh app_deploy/.azure/ || echo "Failed to copy .azure/startup.sh"
          chmod +x app_deploy/.azure/startup.sh || echo "Failed to make .azure/startup.sh executable"
          echo "Created app_deploy/.azure/startup.sh"
          
          # Make sure Oryx configuration files are included (with fixed format)
          cp .oryx_options app_deploy/
          cp oryx-manifest.toml app_deploy/
          cp .skipcompress app_deploy/
          
          # Create standard Azure App Service startup script location
          mkdir -p app_deploy/home/site/scripts
          echo '#!/bin/bash' > app_deploy/home/site/scripts/startup.sh
          echo 'cd /home/site/wwwroot && bash startup.sh' >> app_deploy/home/site/scripts/startup.sh
          chmod +x app_deploy/home/site/scripts/startup.sh
          
          # Make sure static directory exists and copy content
          mkdir -p app_deploy/static
          if [ -d "static" ] && [ "$(ls -A static)" ]; then
            cp -r static/* app_deploy/static/
          else
            echo '<html><body><h1>API Server Running</h1></body></html>' > app_deploy/static/index.html
          fi
          
          # Make scripts executable
          chmod +x app_deploy/*.sh
          
          # Create special marker file for Oryx
          echo "Oryx compression disabled" > app_deploy/.skipcompress
          
          # Verify the deployment package
          echo "Deployment package contents:"
          ls -la app_deploy/
          echo "Check .azure directory:"
          ls -la app_deploy/.azure/ || echo "Failed to list .azure directory"
          
          # Verify no tar.gz files in the deployment
          find app_deploy -name "*.tar.gz" -delete

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: app_deploy
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: ./artifact_package

      - name: Extract and prepare deployment files
        run: |
          echo "Downloaded artifact contents:"
          ls -la ./artifact_package
          
          # Create deployment directory
          mkdir -p ./deploy
          
          # Extract all files from the artifact
          cp -r ./artifact_package/* ./deploy/
          
          # Make sure .azure directory has startup script
          if [ ! -d "./deploy/.azure" ]; then
            echo "Creating .azure directory"
            mkdir -p ./deploy/.azure
          fi
          
          if [ ! -f "./deploy/.azure/startup.sh" ]; then
            echo "Creating basic .azure/startup.sh"
            echo '#!/bin/bash' > ./deploy/.azure/startup.sh
            echo 'cd /home/site/wwwroot && ./startup.sh' >> ./deploy/.azure/startup.sh
            chmod +x ./deploy/.azure/startup.sh
          fi
          
          # Make scripts executable
          chmod +x ./deploy/*.sh
          
          # Verify deploy directory structure
          echo "Deploy directory contents:"
          ls -la ./deploy
          echo "Check .azure directory:"
          ls -la ./deploy/.azure/ || echo "Failed to list .azure directory"
          
          # Verify critical files exist
          if [ ! -f "./deploy/web.config" ]; then echo "ERROR: web.config is missing"; exit 1; fi
          if [ ! -f "./deploy/startup.sh" ]; then echo "ERROR: startup.sh is missing"; exit 1; fi
          if [ ! -f "./deploy/main.py" ]; then echo "ERROR: main.py is missing"; exit 1; fi
          if [ ! -f "./deploy/.azure/startup.sh" ]; then echo "WARNING: .azure/startup.sh is missing"; fi
          
          # Create a marker file to indicate this deployment was unpacked
          echo "Deployment unpacked directly, no tar.gz created at $(date)" > ./deploy/deployment_unpacked.txt

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_F3D169EFBB75465885617AF7F8CD317E }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D338976C3FD14C438AC7BBAB5BA215A7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A59B5AB2EADC48FA812A43C5C5A8BA24 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'tradingviewforwarder'
          slot-name: 'Production'
          package: './deploy'
      