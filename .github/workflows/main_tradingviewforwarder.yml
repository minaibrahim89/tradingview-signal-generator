# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - tradingviewforwarder

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..
          
      - name: List static directory contents
        run: |
          echo "Static directory contents:"
          if [ -d "static" ]; then
            ls -la static
          else
            echo "Static directory not found!"
          fi
          
      # Package static files for deployment but don't rely on runtime extraction
      - name: Package static files
        run: |
          if [ -d "static" ]; then
            echo "Preparing static files for deployment"
            
            # Create a separate archive for reference/backup
            tar -czf static_backup.tar.gz -C static .
            
            # Don't use output.tar.gz anymore as it causes issues
            echo "Not using output.tar.gz for deployment anymore"
          else
            echo "Warning: static directory not found"
            mkdir -p static
            echo "Created empty static directory"
          fi
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Verify application
        run: |
          # Run a basic check to make sure the app imports correctly
          python -c "import main; print('Application imports successfully')"
          # Create a test file marker
          echo "Application verification passed" > verification_passed.txt

      - name: Prepare deployment files
        run: |
          # Create a minimal .env file for production
          echo "DEBUG=False" > .env
          echo "CORS_ORIGIN=*" >> .env
          
          # Create Azure deployment markers
          echo "App deployment timestamp: $(date)" > azure_deploy_marker.txt
          echo "App deployed from GitHub Actions" >> azure_deploy_marker.txt
          
          # Ensure web.config exists
          if [ ! -f "web.config" ]; then
            echo "web.config not found, creating default!"
            echo '<?xml version="1.0" encoding="UTF-8"?>' > web.config
            echo '<configuration>' >> web.config
            echo '  <system.webServer>' >> web.config
            echo '    <handlers>' >> web.config
            echo '      <add name="httpPlatformHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified" />' >> web.config
            echo '    </handlers>' >> web.config
            echo '    <httpPlatform processPath="python"' >> web.config
            echo '                  arguments="-m gunicorn main:app --bind=0.0.0.0:%HTTP_PLATFORM_PORT% --worker-class=uvicorn.workers.UvicornWorker --timeout 600 --workers 4"' >> web.config
            echo '                  stdoutLogEnabled="true"' >> web.config
            echo '                  stdoutLogFile="\\?\%home%\LogFiles\stdout.log"' >> web.config
            echo '                  startupTimeLimit="300">' >> web.config
            echo '      <environmentVariables>' >> web.config
            echo '        <environmentVariable name="PORT" value="%HTTP_PLATFORM_PORT%" />' >> web.config
            echo '        <environmentVariable name="PYTHONUNBUFFERED" value="1" />' >> web.config
            echo '      </environmentVariables>' >> web.config
            echo '    </httpPlatform>' >> web.config
            echo '  </system.webServer>' >> web.config
            echo '</configuration>' >> web.config
          fi

      - name: Prepare deployment package
        run: |
          # Create a clean directory structure for deployment
          mkdir -p app_deploy
          
          # Copy application files
          cp -r *.py *.sh *.json *.txt web.config .env requirements.txt app_deploy/
          cp -r app app_deploy/
          
          # Copy static files directly (not as tar.gz)
          mkdir -p app_deploy/static
          if [ -d "static" ] && [ "$(ls -A static)" ]; then
            cp -r static/* app_deploy/static/
            echo "Static files copied directly to deployment package"
          else
            echo "No static files to copy"
            # Create a placeholder index.html
            mkdir -p app_deploy/static
            echo '<html><body><h1>App is running</h1><p>Static files were not available during deployment.</p></body></html>' > app_deploy/static/index.html
          fi
          
          # Add verification file
          echo "Static files deployed directly at $(date)" > app_deploy/static/direct_deployment.txt
          
          # Create verification files
          echo "Deployment prepared at $(date)" > app_deploy/deployment_verification.txt
          echo "Files in deployment:" >> app_deploy/deployment_verification.txt
          ls -la app_deploy/ >> app_deploy/deployment_verification.txt
          
          # Create the deployment zip for artifact (not needed for actual deployment)
          cd app_deploy
          zip -r ../deployment.zip .
          cd ..

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: app_deploy
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: app_deploy

      - name: Verify deployment package
        run: |
          echo "Checking deployment package contents:"
          ls -la app_deploy
          
          # Verify static directory
          if [ -d "app_deploy/static" ]; then
            echo "Static directory exists and contains:"
            ls -la app_deploy/static
          else
            echo "ERROR: Static directory is missing!"
          fi
          
          # Make scripts executable
          chmod +x app_deploy/*.sh
          
          # No need to run deploy.sh since files are already extracted
          echo "Static files are already extracted in the package"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_F3D169EFBB75465885617AF7F8CD317E }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D338976C3FD14C438AC7BBAB5BA215A7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A59B5AB2EADC48FA812A43C5C5A8BA24 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'tradingviewforwarder'
          slot-name: 'Production'
          package: 'app_deploy'
          timeout-minutes: 15
          respect-slots: true
          max-retries: 3
          retry-wait-seconds: 45

      - name: Verify deployment
        run: |
          echo "Deployment completed at $(date)"
          echo "Waiting 30 seconds for application to start..."
          sleep 30
          echo "You can now access the application at ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
      